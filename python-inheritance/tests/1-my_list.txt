The ``1-my_list`` module
======================

Using ``MyList``
-------------------

Importing the function from the module:
        >>> MyList = __import__("1-my_list").MyList

Testing for module docstring:
         >>> m = __import__("1-my_list").__doc__
         >>> len(m) > 1
         True

Testing for class docstring:
         >>> c = __import__("1-my_list").MyList.__doc__
         >>> len(c) > 1
         True

Testing for method docstring:
	 >>> mod = __import__("1-my_list").MyList.print_sorted.__doc__
	 >>> len(mod) > 1
	 True

Testing that MyList inherits from list:
	 >>> issubclass(MyList, list)
	 True

Testing for empty list:
	 >>> l = MyList()
	 >>> l.print_sorted()
	 []

Testing for regular list:
	 >>> my_list = MyList()
	 >>> my_list.append(1)
	 >>> my_list.append(4)
	 >>> my_list.append(2)
	 >>> my_list.append(3)
	 >>> my_list.append(5)
	 >>> print(my_list)
	 [1, 4, 2, 3, 5]
	 >>> my_list.print_sorted()
	 [1, 2, 3, 4, 5]
	 >>> print(my_list)
	 [1, 4, 2, 3, 5]

Testing for negative numbers:
	 >>> my_list = MyList()
	 >>> my_list.append(-1)
	 >>> my_list.append(-4)
	 >>> my_list.append(-2)
	 >>> my_list.append(-3)
	 >>> my_list.append(-5)
	 >>> print(my_list)
	 [-1, -4, -2, -3, -5]
	 >>> my_list.print_sorted()
	 [-5, -4, -3, -2, -1]
	 >>> print(my_list)
	 [-1, -4, -2, -3, -5]

Testing for single element:
	 >>> my_list = MyList()
	 >>> my_list.append(2)
	 >>> print(my_list)
	 [2]
	 >>> my_list.print_sorted()
	 [2]
	 >>> print(my_list)
	 [2]

Testing that passed list is copied:
	 >>> l = MyList([1, 2, 3])
	 >>> print(l)
	 [1, 2, 3]
	 >>> l.print_sorted()
	 [1, 2, 3]
	 >>> print(l)
	 [1, 2, 3]
